@page "/edit/{id:int}"
@page "/customer/edit/{id:int}"
@using FluentValidation.Results
@using Mc2.CrudTest.Domain.Application.Customers.Commands
@using Mc2.CrudTest.Domain.BaseEntities
@using Mc2.CrudTest.Domain.Customers.DTOs.InputDtos
@using System.Text.Json
@using System.Text
@using Mc2.CrudTest.WebUi.Helpers


<PageTitle>Edit Customer : @command.Id</PageTitle>

<h2>Update Customer : @command.Id</h2>
<hr />

@if (customer is null)
{
    <div class="alert alert-danger">
        there is no customer with id of @(Id)
    </div>
}
else
{
    <EditForm class="form" Model="@command" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div id="exceptions"></div>
        <ValidationSummary></ValidationSummary>
        <InputNumber hidden class="form-control" id="Id" @bind-Value="command.Id"></InputNumber>
        <p>
            <label class="form-label" for="FirstName">First Name *</label>
            <InputText class="form-control" id="FirstName" @bind-Value="command.FirstName"></InputText>
            <ValidationMessage For="@(() => command.FirstName )" />
        </p>
        <p>
            <label class="form-label" for="FirstName">Last Name *</label>
            <InputText class="form-control" id="LastName" @bind-Value="command.LastName"></InputText>
            <ValidationMessage For="@(() => command.LastName )" />
        </p>
        <p>
            <label class="form-label" for="Email">Email *</label>
            <InputText class="form-control" id="Email" @bind-Value="command.Email"></InputText>
            <ValidationMessage For="@(() => command.Email )" />
        </p>
        <p>
            <label class="form-label" for="BankAccountNumber">Bank Account Number*</label>
            <InputText class="form-control" id="BankAccountNumber" @bind-Value="command.BankAccountNumber"></InputText>
            <ValidationMessage For="@(() => command.BankAccountNumber )" />
        </p>
        <p>
            <label class="form-label" for="PhoneNumber">Phone Number *</label>
            <InputText class="form-control" id="PhoneNumber" @bind-Value="command.PhoneNumber"></InputText>
            <ValidationMessage For="@(() => command.PhoneNumber )" />
        </p>
        <p>
            <label class="form-label" for="DateOfBirth">Date Of Birth *</label>
            <InputDate class="form-control" id="DateOfBirth" @bind-Value="command.DateOfBirth"></InputDate>
            <ValidationMessage For="@(() => command.DateOfBirth )" />
        </p>

        <hr />
        <button class="btn btn-primary" type="submit">Submit</button>
        <button class="btn btn-warning" type="reset">Reset</button>
        <button class="btn btn-link" @onclick="NavigateToHome">Back to list</button>
    </EditForm>

}

@code {

    [Parameter]
    public int Id { get; set; } = 0;

    protected UpdateCustomerCommand command = new UpdateCustomerCommand();
    protected CustomerOutputDto customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            customer = await _sender.Send(new GetCustomerByIdQuery(Id));

            if (customer is not null)
            {
                command = new UpdateCustomerCommand()
                    {
                        BankAccountNumber = customer.BankAccountNumber,
                        DateOfBirth = customer.DateOfBirth,
                        Email = customer.Email,
                        FirstName = customer.FirstName,
                        LastName = customer.LastName,
                        Id = customer.Id,
                        PhoneNumber = $"+{customer.PhoneNumber}"
                    };

                await JsRuntime.InvokeVoidAsync("setElementHtmlById", "exceptions", "");
            }

        }

        await base.OnInitializedAsync();
    }

    protected async Task Submit()
    {


        try
        {
            UpdateCustomerCommandValidator validator = new UpdateCustomerCommandValidator();

            var validate = await validator.ValidateAsync(command);
            if (validate.IsValid)
            {
                var resuxlt = await _sender.Send(command);
                NavigateToHome();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("setElementHtmlById", "exceptions", ErrorHtmlHelper.CreateErrors(validate.Errors));
            }
        }
        catch (BusinessException ex)
        {
            await JsRuntime.InvokeVoidAsync("setElementHtmlById", "exceptions", ErrorHtmlHelper.CreateMessageFromBusinessException(ex));
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("setElementHtmlById", "exceptions", ErrorHtmlHelper.CreateMessageFromException());
        }
    }

    protected void NavigateToHome()
    {
        _navigationManager.NavigateTo("/");
    }
}